// source: service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.gopm.rpc.LogDevice', null, global);
goog.exportSymbol('proto.gopm.rpc.ProcessInfo', null, global);
goog.exportSymbol('proto.gopm.rpc.ProcessInfoResponse', null, global);
goog.exportSymbol('proto.gopm.rpc.ProcessSignal', null, global);
goog.exportSymbol('proto.gopm.rpc.ReloadConfigResponse', null, global);
goog.exportSymbol('proto.gopm.rpc.SignalProcessRequest', null, global);
goog.exportSymbol('proto.gopm.rpc.StartStopAllRequest', null, global);
goog.exportSymbol('proto.gopm.rpc.StartStopRequest', null, global);
goog.exportSymbol('proto.gopm.rpc.StartStopResponse', null, global);
goog.exportSymbol('proto.gopm.rpc.TailLogRequest', null, global);
goog.exportSymbol('proto.gopm.rpc.TailLogResponse', null, global);
goog.exportSymbol('proto.gopm.rpc.VersionResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gopm.rpc.VersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gopm.rpc.VersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gopm.rpc.VersionResponse.displayName = 'proto.gopm.rpc.VersionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gopm.rpc.ProcessInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gopm.rpc.ProcessInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.gopm.rpc.ProcessInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gopm.rpc.ProcessInfoResponse.displayName = 'proto.gopm.rpc.ProcessInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gopm.rpc.ProcessInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gopm.rpc.ProcessInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gopm.rpc.ProcessInfo.displayName = 'proto.gopm.rpc.ProcessInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gopm.rpc.StartStopRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gopm.rpc.StartStopRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gopm.rpc.StartStopRequest.displayName = 'proto.gopm.rpc.StartStopRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gopm.rpc.StartStopResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gopm.rpc.StartStopResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gopm.rpc.StartStopResponse.displayName = 'proto.gopm.rpc.StartStopResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gopm.rpc.StartStopAllRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gopm.rpc.StartStopAllRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gopm.rpc.StartStopAllRequest.displayName = 'proto.gopm.rpc.StartStopAllRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gopm.rpc.ReloadConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gopm.rpc.ReloadConfigResponse.repeatedFields_, null);
};
goog.inherits(proto.gopm.rpc.ReloadConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gopm.rpc.ReloadConfigResponse.displayName = 'proto.gopm.rpc.ReloadConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gopm.rpc.TailLogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gopm.rpc.TailLogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gopm.rpc.TailLogRequest.displayName = 'proto.gopm.rpc.TailLogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gopm.rpc.TailLogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gopm.rpc.TailLogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gopm.rpc.TailLogResponse.displayName = 'proto.gopm.rpc.TailLogResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gopm.rpc.SignalProcessRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gopm.rpc.SignalProcessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gopm.rpc.SignalProcessRequest.displayName = 'proto.gopm.rpc.SignalProcessRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gopm.rpc.VersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gopm.rpc.VersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gopm.rpc.VersionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.VersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gopm.rpc.VersionResponse}
 */
proto.gopm.rpc.VersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gopm.rpc.VersionResponse;
  return proto.gopm.rpc.VersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gopm.rpc.VersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gopm.rpc.VersionResponse}
 */
proto.gopm.rpc.VersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gopm.rpc.VersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gopm.rpc.VersionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gopm.rpc.VersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.VersionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.gopm.rpc.VersionResponse.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gopm.rpc.VersionResponse} returns this
 */
proto.gopm.rpc.VersionResponse.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gopm.rpc.ProcessInfoResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gopm.rpc.ProcessInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gopm.rpc.ProcessInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gopm.rpc.ProcessInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.ProcessInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    processesList: jspb.Message.toObjectList(msg.getProcessesList(),
    proto.gopm.rpc.ProcessInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gopm.rpc.ProcessInfoResponse}
 */
proto.gopm.rpc.ProcessInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gopm.rpc.ProcessInfoResponse;
  return proto.gopm.rpc.ProcessInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gopm.rpc.ProcessInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gopm.rpc.ProcessInfoResponse}
 */
proto.gopm.rpc.ProcessInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gopm.rpc.ProcessInfo;
      reader.readMessage(value,proto.gopm.rpc.ProcessInfo.deserializeBinaryFromReader);
      msg.addProcesses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gopm.rpc.ProcessInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gopm.rpc.ProcessInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gopm.rpc.ProcessInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.ProcessInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gopm.rpc.ProcessInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProcessInfo processes = 1;
 * @return {!Array<!proto.gopm.rpc.ProcessInfo>}
 */
proto.gopm.rpc.ProcessInfoResponse.prototype.getProcessesList = function() {
  return /** @type{!Array<!proto.gopm.rpc.ProcessInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gopm.rpc.ProcessInfo, 1));
};


/**
 * @param {!Array<!proto.gopm.rpc.ProcessInfo>} value
 * @return {!proto.gopm.rpc.ProcessInfoResponse} returns this
*/
proto.gopm.rpc.ProcessInfoResponse.prototype.setProcessesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gopm.rpc.ProcessInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gopm.rpc.ProcessInfo}
 */
proto.gopm.rpc.ProcessInfoResponse.prototype.addProcesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gopm.rpc.ProcessInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gopm.rpc.ProcessInfoResponse} returns this
 */
proto.gopm.rpc.ProcessInfoResponse.prototype.clearProcessesList = function() {
  return this.setProcessesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gopm.rpc.ProcessInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.gopm.rpc.ProcessInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gopm.rpc.ProcessInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.ProcessInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    group: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    start: jspb.Message.getFieldWithDefault(msg, 4, 0),
    stop: jspb.Message.getFieldWithDefault(msg, 5, 0),
    now: jspb.Message.getFieldWithDefault(msg, 6, 0),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0),
    stateName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    spawnErr: jspb.Message.getFieldWithDefault(msg, 9, ""),
    exitStatus: jspb.Message.getFieldWithDefault(msg, 10, 0),
    logfile: jspb.Message.getFieldWithDefault(msg, 11, ""),
    stdoutLogfile: jspb.Message.getFieldWithDefault(msg, 12, ""),
    stderrLogfile: jspb.Message.getFieldWithDefault(msg, 13, ""),
    pid: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gopm.rpc.ProcessInfo}
 */
proto.gopm.rpc.ProcessInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gopm.rpc.ProcessInfo;
  return proto.gopm.rpc.ProcessInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gopm.rpc.ProcessInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gopm.rpc.ProcessInfo}
 */
proto.gopm.rpc.ProcessInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStart(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStop(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNow(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setState(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpawnErr(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExitStatus(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogfile(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setStdoutLogfile(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setStderrLogfile(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gopm.rpc.ProcessInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gopm.rpc.ProcessInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gopm.rpc.ProcessInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.ProcessInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroup();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getStop();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getNow();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getStateName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSpawnErr();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getExitStatus();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getLogfile();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getStdoutLogfile();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getStderrLogfile();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.gopm.rpc.ProcessInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string group = 2;
 * @return {string}
 */
proto.gopm.rpc.ProcessInfo.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setGroup = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.gopm.rpc.ProcessInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 start = 4;
 * @return {number}
 */
proto.gopm.rpc.ProcessInfo.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 stop = 5;
 * @return {number}
 */
proto.gopm.rpc.ProcessInfo.prototype.getStop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setStop = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 now = 6;
 * @return {number}
 */
proto.gopm.rpc.ProcessInfo.prototype.getNow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setNow = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 state = 7;
 * @return {number}
 */
proto.gopm.rpc.ProcessInfo.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string state_name = 8;
 * @return {string}
 */
proto.gopm.rpc.ProcessInfo.prototype.getStateName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setStateName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string spawn_err = 9;
 * @return {string}
 */
proto.gopm.rpc.ProcessInfo.prototype.getSpawnErr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setSpawnErr = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int64 exit_status = 10;
 * @return {number}
 */
proto.gopm.rpc.ProcessInfo.prototype.getExitStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setExitStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string logfile = 11;
 * @return {string}
 */
proto.gopm.rpc.ProcessInfo.prototype.getLogfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setLogfile = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string stdout_logfile = 12;
 * @return {string}
 */
proto.gopm.rpc.ProcessInfo.prototype.getStdoutLogfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setStdoutLogfile = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string stderr_logfile = 13;
 * @return {string}
 */
proto.gopm.rpc.ProcessInfo.prototype.getStderrLogfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setStderrLogfile = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int64 pid = 14;
 * @return {number}
 */
proto.gopm.rpc.ProcessInfo.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.gopm.rpc.ProcessInfo} returns this
 */
proto.gopm.rpc.ProcessInfo.prototype.setPid = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gopm.rpc.StartStopRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gopm.rpc.StartStopRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gopm.rpc.StartStopRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.StartStopRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    wait: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gopm.rpc.StartStopRequest}
 */
proto.gopm.rpc.StartStopRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gopm.rpc.StartStopRequest;
  return proto.gopm.rpc.StartStopRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gopm.rpc.StartStopRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gopm.rpc.StartStopRequest}
 */
proto.gopm.rpc.StartStopRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWait(value);
      break;
    case 3:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gopm.rpc.StartStopRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gopm.rpc.StartStopRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gopm.rpc.StartStopRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.StartStopRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWait();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.gopm.rpc.StartStopRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gopm.rpc.StartStopRequest} returns this
 */
proto.gopm.rpc.StartStopRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool wait = 2;
 * @return {boolean}
 */
proto.gopm.rpc.StartStopRequest.prototype.getWait = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gopm.rpc.StartStopRequest} returns this
 */
proto.gopm.rpc.StartStopRequest.prototype.setWait = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * map<string, string> labels = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.gopm.rpc.StartStopRequest.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.gopm.rpc.StartStopRequest} returns this
 */
proto.gopm.rpc.StartStopRequest.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gopm.rpc.StartStopResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gopm.rpc.StartStopResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gopm.rpc.StartStopResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.StartStopResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gopm.rpc.StartStopResponse}
 */
proto.gopm.rpc.StartStopResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gopm.rpc.StartStopResponse;
  return proto.gopm.rpc.StartStopResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gopm.rpc.StartStopResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gopm.rpc.StartStopResponse}
 */
proto.gopm.rpc.StartStopResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gopm.rpc.StartStopResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gopm.rpc.StartStopResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gopm.rpc.StartStopResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.StartStopResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gopm.rpc.StartStopAllRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gopm.rpc.StartStopAllRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gopm.rpc.StartStopAllRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.StartStopAllRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    wait: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gopm.rpc.StartStopAllRequest}
 */
proto.gopm.rpc.StartStopAllRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gopm.rpc.StartStopAllRequest;
  return proto.gopm.rpc.StartStopAllRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gopm.rpc.StartStopAllRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gopm.rpc.StartStopAllRequest}
 */
proto.gopm.rpc.StartStopAllRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWait(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gopm.rpc.StartStopAllRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gopm.rpc.StartStopAllRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gopm.rpc.StartStopAllRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.StartStopAllRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWait();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool wait = 2;
 * @return {boolean}
 */
proto.gopm.rpc.StartStopAllRequest.prototype.getWait = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gopm.rpc.StartStopAllRequest} returns this
 */
proto.gopm.rpc.StartStopAllRequest.prototype.setWait = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gopm.rpc.ReloadConfigResponse.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gopm.rpc.ReloadConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gopm.rpc.ReloadConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.ReloadConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    addedGroupList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    changedGroupList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    removedGroupList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gopm.rpc.ReloadConfigResponse}
 */
proto.gopm.rpc.ReloadConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gopm.rpc.ReloadConfigResponse;
  return proto.gopm.rpc.ReloadConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gopm.rpc.ReloadConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gopm.rpc.ReloadConfigResponse}
 */
proto.gopm.rpc.ReloadConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddedGroup(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addChangedGroup(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRemovedGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gopm.rpc.ReloadConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gopm.rpc.ReloadConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.ReloadConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddedGroupList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getChangedGroupList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getRemovedGroupList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated string added_group = 1;
 * @return {!Array<string>}
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.getAddedGroupList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gopm.rpc.ReloadConfigResponse} returns this
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.setAddedGroupList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gopm.rpc.ReloadConfigResponse} returns this
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.addAddedGroup = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gopm.rpc.ReloadConfigResponse} returns this
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.clearAddedGroupList = function() {
  return this.setAddedGroupList([]);
};


/**
 * repeated string changed_group = 2;
 * @return {!Array<string>}
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.getChangedGroupList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gopm.rpc.ReloadConfigResponse} returns this
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.setChangedGroupList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gopm.rpc.ReloadConfigResponse} returns this
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.addChangedGroup = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gopm.rpc.ReloadConfigResponse} returns this
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.clearChangedGroupList = function() {
  return this.setChangedGroupList([]);
};


/**
 * repeated string removed_group = 3;
 * @return {!Array<string>}
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.getRemovedGroupList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gopm.rpc.ReloadConfigResponse} returns this
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.setRemovedGroupList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gopm.rpc.ReloadConfigResponse} returns this
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.addRemovedGroup = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gopm.rpc.ReloadConfigResponse} returns this
 */
proto.gopm.rpc.ReloadConfigResponse.prototype.clearRemovedGroupList = function() {
  return this.setRemovedGroupList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gopm.rpc.TailLogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gopm.rpc.TailLogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gopm.rpc.TailLogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.TailLogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    device: jspb.Message.getFieldWithDefault(msg, 2, 0),
    backloglines: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nofollow: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gopm.rpc.TailLogRequest}
 */
proto.gopm.rpc.TailLogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gopm.rpc.TailLogRequest;
  return proto.gopm.rpc.TailLogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gopm.rpc.TailLogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gopm.rpc.TailLogRequest}
 */
proto.gopm.rpc.TailLogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.gopm.rpc.LogDevice} */ (reader.readEnum());
      msg.setDevice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBackloglines(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNofollow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gopm.rpc.TailLogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gopm.rpc.TailLogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gopm.rpc.TailLogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.TailLogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDevice();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBackloglines();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNofollow();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.gopm.rpc.TailLogRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gopm.rpc.TailLogRequest} returns this
 */
proto.gopm.rpc.TailLogRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional LogDevice device = 2;
 * @return {!proto.gopm.rpc.LogDevice}
 */
proto.gopm.rpc.TailLogRequest.prototype.getDevice = function() {
  return /** @type {!proto.gopm.rpc.LogDevice} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.gopm.rpc.LogDevice} value
 * @return {!proto.gopm.rpc.TailLogRequest} returns this
 */
proto.gopm.rpc.TailLogRequest.prototype.setDevice = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 backlogLines = 3;
 * @return {number}
 */
proto.gopm.rpc.TailLogRequest.prototype.getBackloglines = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gopm.rpc.TailLogRequest} returns this
 */
proto.gopm.rpc.TailLogRequest.prototype.setBackloglines = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool noFollow = 4;
 * @return {boolean}
 */
proto.gopm.rpc.TailLogRequest.prototype.getNofollow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gopm.rpc.TailLogRequest} returns this
 */
proto.gopm.rpc.TailLogRequest.prototype.setNofollow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gopm.rpc.TailLogResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gopm.rpc.TailLogResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gopm.rpc.TailLogResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.TailLogResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    lines: msg.getLines_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gopm.rpc.TailLogResponse}
 */
proto.gopm.rpc.TailLogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gopm.rpc.TailLogResponse;
  return proto.gopm.rpc.TailLogResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gopm.rpc.TailLogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gopm.rpc.TailLogResponse}
 */
proto.gopm.rpc.TailLogResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLines(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gopm.rpc.TailLogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gopm.rpc.TailLogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gopm.rpc.TailLogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.TailLogResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLines_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes lines = 1;
 * @return {string}
 */
proto.gopm.rpc.TailLogResponse.prototype.getLines = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes lines = 1;
 * This is a type-conversion wrapper around `getLines()`
 * @return {string}
 */
proto.gopm.rpc.TailLogResponse.prototype.getLines_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLines()));
};


/**
 * optional bytes lines = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLines()`
 * @return {!Uint8Array}
 */
proto.gopm.rpc.TailLogResponse.prototype.getLines_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLines()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gopm.rpc.TailLogResponse} returns this
 */
proto.gopm.rpc.TailLogResponse.prototype.setLines = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gopm.rpc.SignalProcessRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gopm.rpc.SignalProcessRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gopm.rpc.SignalProcessRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.SignalProcessRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signal: jspb.Message.getFieldWithDefault(msg, 2, 0),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gopm.rpc.SignalProcessRequest}
 */
proto.gopm.rpc.SignalProcessRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gopm.rpc.SignalProcessRequest;
  return proto.gopm.rpc.SignalProcessRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gopm.rpc.SignalProcessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gopm.rpc.SignalProcessRequest}
 */
proto.gopm.rpc.SignalProcessRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.gopm.rpc.ProcessSignal} */ (reader.readEnum());
      msg.setSignal(value);
      break;
    case 3:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gopm.rpc.SignalProcessRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gopm.rpc.SignalProcessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gopm.rpc.SignalProcessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gopm.rpc.SignalProcessRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignal();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.gopm.rpc.SignalProcessRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gopm.rpc.SignalProcessRequest} returns this
 */
proto.gopm.rpc.SignalProcessRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ProcessSignal signal = 2;
 * @return {!proto.gopm.rpc.ProcessSignal}
 */
proto.gopm.rpc.SignalProcessRequest.prototype.getSignal = function() {
  return /** @type {!proto.gopm.rpc.ProcessSignal} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.gopm.rpc.ProcessSignal} value
 * @return {!proto.gopm.rpc.SignalProcessRequest} returns this
 */
proto.gopm.rpc.SignalProcessRequest.prototype.setSignal = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * map<string, string> labels = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.gopm.rpc.SignalProcessRequest.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.gopm.rpc.SignalProcessRequest} returns this
 */
proto.gopm.rpc.SignalProcessRequest.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
  return this;};


/**
 * @enum {number}
 */
proto.gopm.rpc.LogDevice = {
  STDOUT: 0,
  STDERR: 1
};

/**
 * @enum {number}
 */
proto.gopm.rpc.ProcessSignal = {
  HUP: 0,
  INT: 1,
  QUIT: 2,
  KILL: 3,
  USR1: 4,
  USR2: 5,
  TERM: 6
};

goog.object.extend(exports, proto.gopm.rpc);
