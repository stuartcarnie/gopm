// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogDevice int32

const (
	LogDevice_Stdout LogDevice = 0
	LogDevice_Stderr LogDevice = 1
)

var LogDevice_name = map[int32]string{
	0: "Stdout",
	1: "Stderr",
}

var LogDevice_value = map[string]int32{
	"Stdout": 0,
	"Stderr": 1,
}

func (x LogDevice) String() string {
	return proto.EnumName(LogDevice_name, int32(x))
}

func (LogDevice) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

type ProcessSignal int32

const (
	ProcessSignal_HUP  ProcessSignal = 0
	ProcessSignal_INT  ProcessSignal = 1
	ProcessSignal_QUIT ProcessSignal = 2
	ProcessSignal_KILL ProcessSignal = 3
	ProcessSignal_USR1 ProcessSignal = 4
	ProcessSignal_USR2 ProcessSignal = 5
	ProcessSignal_TERM ProcessSignal = 6
)

var ProcessSignal_name = map[int32]string{
	0: "HUP",
	1: "INT",
	2: "QUIT",
	3: "KILL",
	4: "USR1",
	5: "USR2",
	6: "TERM",
}

var ProcessSignal_value = map[string]int32{
	"HUP":  0,
	"INT":  1,
	"QUIT": 2,
	"KILL": 3,
	"USR1": 4,
	"USR2": 5,
	"TERM": 6,
}

func (x ProcessSignal) String() string {
	return proto.EnumName(ProcessSignal_name, int32(x))
}

func (ProcessSignal) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

type VersionResponse struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionResponse.Unmarshal(m, b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
}
func (m *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(m, src)
}
func (m *VersionResponse) XXX_Size() int {
	return xxx_messageInfo_VersionResponse.Size(m)
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ProcessInfoResponse struct {
	Processes            []*ProcessInfo `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProcessInfoResponse) Reset()         { *m = ProcessInfoResponse{} }
func (m *ProcessInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessInfoResponse) ProtoMessage()    {}
func (*ProcessInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *ProcessInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessInfoResponse.Unmarshal(m, b)
}
func (m *ProcessInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessInfoResponse.Marshal(b, m, deterministic)
}
func (m *ProcessInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessInfoResponse.Merge(m, src)
}
func (m *ProcessInfoResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessInfoResponse.Size(m)
}
func (m *ProcessInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessInfoResponse proto.InternalMessageInfo

func (m *ProcessInfoResponse) GetProcesses() []*ProcessInfo {
	if m != nil {
		return m.Processes
	}
	return nil
}

type ProcessInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group                string   `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Start                int64    `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	Stop                 int64    `protobuf:"varint,5,opt,name=stop,proto3" json:"stop,omitempty"`
	Now                  int64    `protobuf:"varint,6,opt,name=now,proto3" json:"now,omitempty"`
	State                int64    `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
	StateName            string   `protobuf:"bytes,8,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
	SpawnErr             string   `protobuf:"bytes,9,opt,name=spawn_err,json=spawnErr,proto3" json:"spawn_err,omitempty"`
	ExitStatus           int64    `protobuf:"varint,10,opt,name=exit_status,json=exitStatus,proto3" json:"exit_status,omitempty"`
	Logfile              string   `protobuf:"bytes,11,opt,name=logfile,proto3" json:"logfile,omitempty"`
	StdoutLogfile        string   `protobuf:"bytes,12,opt,name=stdout_logfile,json=stdoutLogfile,proto3" json:"stdout_logfile,omitempty"`
	StderrLogfile        string   `protobuf:"bytes,13,opt,name=stderr_logfile,json=stderrLogfile,proto3" json:"stderr_logfile,omitempty"`
	Pid                  int64    `protobuf:"varint,14,opt,name=pid,proto3" json:"pid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessInfo) Reset()         { *m = ProcessInfo{} }
func (m *ProcessInfo) String() string { return proto.CompactTextString(m) }
func (*ProcessInfo) ProtoMessage()    {}
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *ProcessInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessInfo.Unmarshal(m, b)
}
func (m *ProcessInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessInfo.Marshal(b, m, deterministic)
}
func (m *ProcessInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessInfo.Merge(m, src)
}
func (m *ProcessInfo) XXX_Size() int {
	return xxx_messageInfo_ProcessInfo.Size(m)
}
func (m *ProcessInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessInfo proto.InternalMessageInfo

func (m *ProcessInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProcessInfo) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ProcessInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProcessInfo) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ProcessInfo) GetStop() int64 {
	if m != nil {
		return m.Stop
	}
	return 0
}

func (m *ProcessInfo) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *ProcessInfo) GetState() int64 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ProcessInfo) GetStateName() string {
	if m != nil {
		return m.StateName
	}
	return ""
}

func (m *ProcessInfo) GetSpawnErr() string {
	if m != nil {
		return m.SpawnErr
	}
	return ""
}

func (m *ProcessInfo) GetExitStatus() int64 {
	if m != nil {
		return m.ExitStatus
	}
	return 0
}

func (m *ProcessInfo) GetLogfile() string {
	if m != nil {
		return m.Logfile
	}
	return ""
}

func (m *ProcessInfo) GetStdoutLogfile() string {
	if m != nil {
		return m.StdoutLogfile
	}
	return ""
}

func (m *ProcessInfo) GetStderrLogfile() string {
	if m != nil {
		return m.StderrLogfile
	}
	return ""
}

func (m *ProcessInfo) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

type StartStopRequest struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Wait                 bool              `protobuf:"varint,2,opt,name=wait,proto3" json:"wait,omitempty"`
	Labels               map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StartStopRequest) Reset()         { *m = StartStopRequest{} }
func (m *StartStopRequest) String() string { return proto.CompactTextString(m) }
func (*StartStopRequest) ProtoMessage()    {}
func (*StartStopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *StartStopRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartStopRequest.Unmarshal(m, b)
}
func (m *StartStopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartStopRequest.Marshal(b, m, deterministic)
}
func (m *StartStopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartStopRequest.Merge(m, src)
}
func (m *StartStopRequest) XXX_Size() int {
	return xxx_messageInfo_StartStopRequest.Size(m)
}
func (m *StartStopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartStopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartStopRequest proto.InternalMessageInfo

func (m *StartStopRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StartStopRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

func (m *StartStopRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type StartStopResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartStopResponse) Reset()         { *m = StartStopResponse{} }
func (m *StartStopResponse) String() string { return proto.CompactTextString(m) }
func (*StartStopResponse) ProtoMessage()    {}
func (*StartStopResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *StartStopResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartStopResponse.Unmarshal(m, b)
}
func (m *StartStopResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartStopResponse.Marshal(b, m, deterministic)
}
func (m *StartStopResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartStopResponse.Merge(m, src)
}
func (m *StartStopResponse) XXX_Size() int {
	return xxx_messageInfo_StartStopResponse.Size(m)
}
func (m *StartStopResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartStopResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartStopResponse proto.InternalMessageInfo

type StartStopAllRequest struct {
	Wait                 bool     `protobuf:"varint,2,opt,name=wait,proto3" json:"wait,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartStopAllRequest) Reset()         { *m = StartStopAllRequest{} }
func (m *StartStopAllRequest) String() string { return proto.CompactTextString(m) }
func (*StartStopAllRequest) ProtoMessage()    {}
func (*StartStopAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *StartStopAllRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartStopAllRequest.Unmarshal(m, b)
}
func (m *StartStopAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartStopAllRequest.Marshal(b, m, deterministic)
}
func (m *StartStopAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartStopAllRequest.Merge(m, src)
}
func (m *StartStopAllRequest) XXX_Size() int {
	return xxx_messageInfo_StartStopAllRequest.Size(m)
}
func (m *StartStopAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartStopAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartStopAllRequest proto.InternalMessageInfo

func (m *StartStopAllRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

type ReloadConfigResponse struct {
	AddedGroup           []string `protobuf:"bytes,1,rep,name=added_group,json=addedGroup,proto3" json:"added_group,omitempty"`
	ChangedGroup         []string `protobuf:"bytes,2,rep,name=changed_group,json=changedGroup,proto3" json:"changed_group,omitempty"`
	RemovedGroup         []string `protobuf:"bytes,3,rep,name=removed_group,json=removedGroup,proto3" json:"removed_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReloadConfigResponse) Reset()         { *m = ReloadConfigResponse{} }
func (m *ReloadConfigResponse) String() string { return proto.CompactTextString(m) }
func (*ReloadConfigResponse) ProtoMessage()    {}
func (*ReloadConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}

func (m *ReloadConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReloadConfigResponse.Unmarshal(m, b)
}
func (m *ReloadConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReloadConfigResponse.Marshal(b, m, deterministic)
}
func (m *ReloadConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReloadConfigResponse.Merge(m, src)
}
func (m *ReloadConfigResponse) XXX_Size() int {
	return xxx_messageInfo_ReloadConfigResponse.Size(m)
}
func (m *ReloadConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReloadConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReloadConfigResponse proto.InternalMessageInfo

func (m *ReloadConfigResponse) GetAddedGroup() []string {
	if m != nil {
		return m.AddedGroup
	}
	return nil
}

func (m *ReloadConfigResponse) GetChangedGroup() []string {
	if m != nil {
		return m.ChangedGroup
	}
	return nil
}

func (m *ReloadConfigResponse) GetRemovedGroup() []string {
	if m != nil {
		return m.RemovedGroup
	}
	return nil
}

type TailLogRequest struct {
	Name                 string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Device               LogDevice `protobuf:"varint,2,opt,name=device,proto3,enum=gopm.rpc.LogDevice" json:"device,omitempty"`
	BacklogLines         int64     `protobuf:"varint,3,opt,name=backlogLines,proto3" json:"backlogLines,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TailLogRequest) Reset()         { *m = TailLogRequest{} }
func (m *TailLogRequest) String() string { return proto.CompactTextString(m) }
func (*TailLogRequest) ProtoMessage()    {}
func (*TailLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7}
}

func (m *TailLogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TailLogRequest.Unmarshal(m, b)
}
func (m *TailLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TailLogRequest.Marshal(b, m, deterministic)
}
func (m *TailLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TailLogRequest.Merge(m, src)
}
func (m *TailLogRequest) XXX_Size() int {
	return xxx_messageInfo_TailLogRequest.Size(m)
}
func (m *TailLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TailLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TailLogRequest proto.InternalMessageInfo

func (m *TailLogRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TailLogRequest) GetDevice() LogDevice {
	if m != nil {
		return m.Device
	}
	return LogDevice_Stdout
}

func (m *TailLogRequest) GetBacklogLines() int64 {
	if m != nil {
		return m.BacklogLines
	}
	return 0
}

type TailLogResponse struct {
	Lines                []byte   `protobuf:"bytes,1,opt,name=lines,proto3" json:"lines,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TailLogResponse) Reset()         { *m = TailLogResponse{} }
func (m *TailLogResponse) String() string { return proto.CompactTextString(m) }
func (*TailLogResponse) ProtoMessage()    {}
func (*TailLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{8}
}

func (m *TailLogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TailLogResponse.Unmarshal(m, b)
}
func (m *TailLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TailLogResponse.Marshal(b, m, deterministic)
}
func (m *TailLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TailLogResponse.Merge(m, src)
}
func (m *TailLogResponse) XXX_Size() int {
	return xxx_messageInfo_TailLogResponse.Size(m)
}
func (m *TailLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TailLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TailLogResponse proto.InternalMessageInfo

func (m *TailLogResponse) GetLines() []byte {
	if m != nil {
		return m.Lines
	}
	return nil
}

type SignalProcessRequest struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Signal               ProcessSignal     `protobuf:"varint,2,opt,name=signal,proto3,enum=gopm.rpc.ProcessSignal" json:"signal,omitempty"`
	Labels               map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SignalProcessRequest) Reset()         { *m = SignalProcessRequest{} }
func (m *SignalProcessRequest) String() string { return proto.CompactTextString(m) }
func (*SignalProcessRequest) ProtoMessage()    {}
func (*SignalProcessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{9}
}

func (m *SignalProcessRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignalProcessRequest.Unmarshal(m, b)
}
func (m *SignalProcessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignalProcessRequest.Marshal(b, m, deterministic)
}
func (m *SignalProcessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalProcessRequest.Merge(m, src)
}
func (m *SignalProcessRequest) XXX_Size() int {
	return xxx_messageInfo_SignalProcessRequest.Size(m)
}
func (m *SignalProcessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalProcessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignalProcessRequest proto.InternalMessageInfo

func (m *SignalProcessRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SignalProcessRequest) GetSignal() ProcessSignal {
	if m != nil {
		return m.Signal
	}
	return ProcessSignal_HUP
}

func (m *SignalProcessRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterEnum("gopm.rpc.LogDevice", LogDevice_name, LogDevice_value)
	proto.RegisterEnum("gopm.rpc.ProcessSignal", ProcessSignal_name, ProcessSignal_value)
	proto.RegisterType((*VersionResponse)(nil), "gopm.rpc.VersionResponse")
	proto.RegisterType((*ProcessInfoResponse)(nil), "gopm.rpc.ProcessInfoResponse")
	proto.RegisterType((*ProcessInfo)(nil), "gopm.rpc.ProcessInfo")
	proto.RegisterType((*StartStopRequest)(nil), "gopm.rpc.StartStopRequest")
	proto.RegisterMapType((map[string]string)(nil), "gopm.rpc.StartStopRequest.LabelsEntry")
	proto.RegisterType((*StartStopResponse)(nil), "gopm.rpc.StartStopResponse")
	proto.RegisterType((*StartStopAllRequest)(nil), "gopm.rpc.StartStopAllRequest")
	proto.RegisterType((*ReloadConfigResponse)(nil), "gopm.rpc.ReloadConfigResponse")
	proto.RegisterType((*TailLogRequest)(nil), "gopm.rpc.TailLogRequest")
	proto.RegisterType((*TailLogResponse)(nil), "gopm.rpc.TailLogResponse")
	proto.RegisterType((*SignalProcessRequest)(nil), "gopm.rpc.SignalProcessRequest")
	proto.RegisterMapType((map[string]string)(nil), "gopm.rpc.SignalProcessRequest.LabelsEntry")
}

func init() {
	proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626)
}

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5b, 0x73, 0xdb, 0x44,
	0x14, 0xae, 0x22, 0x5f, 0x8f, 0x2f, 0x15, 0x9b, 0x00, 0xc2, 0x99, 0xb4, 0x19, 0x75, 0x80, 0x90,
	0xce, 0x28, 0x90, 0xbe, 0x40, 0x99, 0x01, 0x5a, 0x48, 0x4d, 0xc0, 0x74, 0x52, 0x29, 0xe1, 0x81,
	0x17, 0x8f, 0x62, 0x6d, 0x54, 0x4d, 0x65, 0xad, 0xd8, 0x5d, 0xc7, 0xe4, 0x11, 0xfe, 0x13, 0x7f,
	0x86, 0x3f, 0x03, 0xb3, 0x47, 0x6b, 0x49, 0x36, 0x76, 0xf2, 0xd0, 0xbe, 0x9d, 0xf3, 0xed, 0x77,
	0x2e, 0x7b, 0x6e, 0xd0, 0x13, 0x94, 0x5f, 0xc7, 0x13, 0xea, 0x66, 0x9c, 0x49, 0x46, 0x5a, 0x11,
	0xcb, 0xa6, 0x2e, 0xcf, 0x26, 0x83, 0xdd, 0x88, 0xb1, 0x28, 0xa1, 0x47, 0x88, 0x5f, 0xce, 0xae,
	0x8e, 0xe8, 0x34, 0x93, 0x37, 0x39, 0xcd, 0x79, 0x0c, 0xf7, 0x7f, 0xa5, 0x5c, 0xc4, 0x2c, 0xf5,
	0xa8, 0xc8, 0x58, 0x2a, 0x28, 0xb1, 0xa1, 0x79, 0x9d, 0x43, 0xb6, 0xb1, 0x6f, 0x1c, 0xb4, 0xbd,
	0x85, 0xea, 0xfc, 0x04, 0xdb, 0x67, 0x9c, 0x4d, 0xa8, 0x10, 0xa7, 0xe9, 0x15, 0x2b, 0x0c, 0x9e,
	0x40, 0x3b, 0xcb, 0x61, 0x2a, 0x6c, 0x63, 0xdf, 0x3c, 0xe8, 0x1c, 0xbf, 0xef, 0x2e, 0xc2, 0xbb,
	0x55, 0x8b, 0x92, 0xe7, 0xfc, 0x65, 0x42, 0xa7, 0xf2, 0x44, 0x08, 0xd4, 0xd2, 0x60, 0x4a, 0x75,
	0x48, 0x94, 0xc9, 0x0e, 0xd4, 0x23, 0xce, 0x66, 0x99, 0xbd, 0x85, 0x60, 0xae, 0x90, 0x7d, 0xe8,
	0x84, 0x54, 0x4c, 0x78, 0x9c, 0x49, 0x95, 0xa3, 0x89, 0x6f, 0x55, 0x48, 0xd9, 0x09, 0x19, 0x70,
	0x69, 0xd7, 0xf6, 0x8d, 0x03, 0xd3, 0xcb, 0x15, 0x15, 0x41, 0x48, 0x96, 0xd9, 0x75, 0x04, 0x51,
	0x26, 0x16, 0x98, 0x29, 0x9b, 0xdb, 0x0d, 0x84, 0x94, 0xa8, 0x6d, 0x25, 0xb5, 0x9b, 0x85, 0xad,
	0xa4, 0x64, 0x0f, 0x00, 0x85, 0x31, 0xe6, 0xd8, 0xc2, 0x90, 0x6d, 0x44, 0x5e, 0xaa, 0x44, 0x77,
	0xa1, 0x2d, 0xb2, 0x60, 0x9e, 0x8e, 0x29, 0xe7, 0x76, 0x1b, 0x5f, 0x5b, 0x08, 0x9c, 0x70, 0x4e,
	0x1e, 0x42, 0x87, 0xfe, 0x11, 0xcb, 0xb1, 0xa2, 0xcf, 0x84, 0x0d, 0xe8, 0x17, 0x14, 0xe4, 0x23,
	0xa2, 0x0a, 0x9e, 0xb0, 0xe8, 0x2a, 0x4e, 0xa8, 0xdd, 0xc9, 0x0b, 0xae, 0x55, 0xf2, 0x31, 0xf4,
	0x85, 0x0c, 0xd9, 0x4c, 0x8e, 0x17, 0x84, 0x2e, 0x12, 0x7a, 0x39, 0x3a, 0x5a, 0xa2, 0x51, 0xce,
	0x0b, 0x5a, 0xaf, 0xa0, 0x51, 0xce, 0x17, 0x34, 0x0b, 0xcc, 0x2c, 0x0e, 0xed, 0x7e, 0xfe, 0xd9,
	0x2c, 0x0e, 0x9d, 0xbf, 0x0d, 0xb0, 0x7c, 0x55, 0x1c, 0x5f, 0xb2, 0xcc, 0xa3, 0xbf, 0xcf, 0xa8,
	0x90, 0x6b, 0x3b, 0x41, 0xa0, 0x36, 0x0f, 0x62, 0x89, 0x8d, 0x68, 0x79, 0x28, 0x93, 0x6f, 0xa0,
	0x91, 0x04, 0x97, 0x34, 0x11, 0xb6, 0x89, 0x3d, 0xff, 0xa4, 0xec, 0xf9, 0xaa, 0x4f, 0x77, 0x84,
	0xc4, 0x93, 0x54, 0xf2, 0x1b, 0x4f, 0x5b, 0x0d, 0xbe, 0x82, 0x4e, 0x05, 0x56, 0xd9, 0xbd, 0xa1,
	0x37, 0x3a, 0xaa, 0x12, 0x55, 0x2b, 0xae, 0x83, 0x64, 0x46, 0x17, 0xed, 0x47, 0xe5, 0xe9, 0xd6,
	0x97, 0x86, 0xb3, 0x0d, 0xef, 0x55, 0x42, 0xe4, 0x63, 0xe8, 0x7c, 0x06, 0xdb, 0x05, 0xf8, 0x2c,
	0x49, 0x2a, 0xdf, 0x59, 0x4d, 0xdd, 0xf9, 0xd3, 0x80, 0x1d, 0x8f, 0x26, 0x2c, 0x08, 0xbf, 0x67,
	0xe9, 0x55, 0x1c, 0x15, 0xa3, 0xfc, 0x10, 0x3a, 0x41, 0x18, 0xd2, 0x70, 0x9c, 0xcf, 0x9d, 0x1a,
	0xe6, 0xb6, 0x07, 0x08, 0x0d, 0x71, 0xf8, 0x1e, 0x41, 0x6f, 0xf2, 0x3a, 0x48, 0xa3, 0x82, 0xb2,
	0x85, 0x94, 0xae, 0x06, 0x0b, 0x12, 0xa7, 0x53, 0x76, 0x5d, 0x90, 0xcc, 0x9c, 0xa4, 0x41, 0x24,
	0x39, 0x33, 0xe8, 0x9f, 0x07, 0x71, 0x32, 0x62, 0xd1, 0x6d, 0x85, 0x7f, 0x0c, 0x8d, 0x90, 0xaa,
	0xb5, 0xc6, 0xfc, 0xfb, 0xc7, 0xdb, 0x65, 0x91, 0x47, 0x2c, 0xfa, 0x01, 0x9f, 0x3c, 0x4d, 0x21,
	0x0e, 0x74, 0x2f, 0x83, 0xc9, 0x9b, 0x84, 0x45, 0xa3, 0x38, 0xa5, 0x02, 0x57, 0xc3, 0xf4, 0x96,
	0x30, 0xe7, 0x53, 0xb8, 0x5f, 0x84, 0xd5, 0x9f, 0xde, 0x81, 0x7a, 0x82, 0x7c, 0x15, 0xb8, 0xeb,
	0xe5, 0x8a, 0xf3, 0x8f, 0x01, 0x3b, 0x7e, 0x1c, 0xa5, 0x41, 0xa2, 0xd7, 0xf4, 0xb6, 0x34, 0x8f,
	0xa0, 0x21, 0x90, 0xab, 0xd3, 0xfc, 0xf0, 0x7f, 0xfb, 0x9f, 0xbb, 0xf2, 0x34, 0x8d, 0x3c, 0x5f,
	0x19, 0x9e, 0xc3, 0xca, 0xf0, 0xac, 0x09, 0xfa, 0x8e, 0x07, 0xe8, 0xf0, 0x11, 0xb4, 0x8b, 0xf2,
	0x11, 0x80, 0x86, 0x8f, 0xfb, 0x64, 0xdd, 0xd3, 0x32, 0xe5, 0xdc, 0x32, 0x0e, 0x7d, 0xe8, 0x2d,
	0x25, 0x4f, 0x9a, 0x60, 0xfe, 0x78, 0x71, 0x66, 0xdd, 0x53, 0xc2, 0xe9, 0xcb, 0x73, 0xcb, 0x20,
	0x2d, 0xa8, 0xbd, 0xba, 0x38, 0x3d, 0xb7, 0xb6, 0x94, 0xf4, 0xf3, 0xe9, 0x68, 0x64, 0x99, 0x4a,
	0xba, 0xf0, 0xbd, 0x2f, 0xac, 0x9a, 0x96, 0x8e, 0xad, 0xba, 0x92, 0xce, 0x4f, 0xbc, 0x5f, 0xac,
	0xc6, 0xf1, 0xbf, 0x0d, 0xa8, 0x0d, 0x59, 0x36, 0x25, 0xdf, 0x02, 0x0c, 0xa9, 0xd4, 0xc7, 0x97,
	0x7c, 0xe0, 0xe6, 0x57, 0xda, 0x5d, 0x5c, 0x69, 0xf7, 0x44, 0x5d, 0xe9, 0xc1, 0x47, 0x65, 0x5d,
	0x56, 0xef, 0xf4, 0x10, 0xfa, 0x43, 0x2a, 0xab, 0x37, 0x74, 0x93, 0x93, 0xbd, 0xf5, 0xd7, 0xb8,
	0x74, 0xd4, 0xc5, 0xc5, 0xd1, 0x6f, 0x64, 0xb0, 0x79, 0x91, 0x07, 0xbb, 0x6b, 0xdf, 0xb4, 0xa3,
	0x17, 0xd0, 0x51, 0xfa, 0x5b, 0xfb, 0x79, 0xa5, 0xd7, 0xfb, 0x59, 0xb2, 0x18, 0x03, 0x2a, 0xc8,
	0xde, 0x1a, 0x8b, 0x72, 0xcd, 0xef, 0xfa, 0xe3, 0x99, 0x3a, 0x74, 0x68, 0xf0, 0xae, 0x3c, 0x3e,
	0x85, 0x96, 0xff, 0x7a, 0x26, 0x43, 0x36, 0xdf, 0xdc, 0xbd, 0x0d, 0x38, 0x79, 0x01, 0xdd, 0xea,
	0xf9, 0xd9, 0x68, 0xff, 0xa0, 0x4c, 0x61, 0xed, 0xb9, 0xfa, 0x0e, 0x9a, 0x7a, 0x99, 0x89, 0x5d,
	0x52, 0x97, 0xcf, 0x4a, 0x75, 0x84, 0x56, 0x36, 0xff, 0x73, 0x83, 0x0c, 0xa1, 0xb7, 0xb4, 0x6f,
	0xe4, 0xc1, 0xed, 0x8b, 0xb8, 0xf1, 0x4b, 0x3e, 0x90, 0x25, 0x7e, 0x7e, 0x09, 0xef, 0xf2, 0x76,
	0x47, 0x8d, 0x0b, 0xa7, 0x4b, 0x7d, 0x7b, 0x3b, 0xa7, 0xcf, 0x9b, 0xbf, 0xd5, 0xdd, 0xaf, 0x79,
	0x36, 0xb9, 0x6c, 0xe0, 0x17, 0x9e, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x5f, 0x29, 0x47,
	0x3a, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GopmClient is the client API for Gopm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GopmClient interface {
	GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	GetProcessInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
	StartProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error)
	StopProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error)
	StartAllProcesses(ctx context.Context, in *StartStopAllRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
	StopAllProcesses(ctx context.Context, in *StartStopAllRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
	Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ReloadConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReloadConfigResponse, error)
	TailLog(ctx context.Context, in *TailLogRequest, opts ...grpc.CallOption) (Gopm_TailLogClient, error)
	SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SignalProcessGroup(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
	SignalAllProcesses(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
}

type gopmClient struct {
	cc grpc.ClientConnInterface
}

func NewGopmClient(cc grpc.ClientConnInterface) GopmClient {
	return &gopmClient{cc}
}

func (c *gopmClient) GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) GetProcessInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/GetProcessInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) StartProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error) {
	out := new(StartStopResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/StartProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) StopProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error) {
	out := new(StartStopResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/StopProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) StartAllProcesses(ctx context.Context, in *StartStopAllRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/StartAllProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) StopAllProcesses(ctx context.Context, in *StartStopAllRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/StopAllProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) ReloadConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReloadConfigResponse, error) {
	out := new(ReloadConfigResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/ReloadConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) TailLog(ctx context.Context, in *TailLogRequest, opts ...grpc.CallOption) (Gopm_TailLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gopm_serviceDesc.Streams[0], "/gopm.rpc.Gopm/TailLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &gopmTailLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gopm_TailLogClient interface {
	Recv() (*TailLogResponse, error)
	grpc.ClientStream
}

type gopmTailLogClient struct {
	grpc.ClientStream
}

func (x *gopmTailLogClient) Recv() (*TailLogResponse, error) {
	m := new(TailLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gopmClient) SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/SignalProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) SignalProcessGroup(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/SignalProcessGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) SignalAllProcesses(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/SignalAllProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GopmServer is the server API for Gopm service.
type GopmServer interface {
	GetVersion(context.Context, *empty.Empty) (*VersionResponse, error)
	GetProcessInfo(context.Context, *empty.Empty) (*ProcessInfoResponse, error)
	StartProcess(context.Context, *StartStopRequest) (*StartStopResponse, error)
	StopProcess(context.Context, *StartStopRequest) (*StartStopResponse, error)
	StartAllProcesses(context.Context, *StartStopAllRequest) (*ProcessInfoResponse, error)
	StopAllProcesses(context.Context, *StartStopAllRequest) (*ProcessInfoResponse, error)
	Shutdown(context.Context, *empty.Empty) (*empty.Empty, error)
	ReloadConfig(context.Context, *empty.Empty) (*ReloadConfigResponse, error)
	TailLog(*TailLogRequest, Gopm_TailLogServer) error
	SignalProcess(context.Context, *SignalProcessRequest) (*empty.Empty, error)
	SignalProcessGroup(context.Context, *SignalProcessRequest) (*ProcessInfoResponse, error)
	SignalAllProcesses(context.Context, *SignalProcessRequest) (*ProcessInfoResponse, error)
}

// UnimplementedGopmServer can be embedded to have forward compatible implementations.
type UnimplementedGopmServer struct {
}

func (*UnimplementedGopmServer) GetVersion(ctx context.Context, req *empty.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedGopmServer) GetProcessInfo(ctx context.Context, req *empty.Empty) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInfo not implemented")
}
func (*UnimplementedGopmServer) StartProcess(ctx context.Context, req *StartStopRequest) (*StartStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProcess not implemented")
}
func (*UnimplementedGopmServer) StopProcess(ctx context.Context, req *StartStopRequest) (*StartStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProcess not implemented")
}
func (*UnimplementedGopmServer) StartAllProcesses(ctx context.Context, req *StartStopAllRequest) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAllProcesses not implemented")
}
func (*UnimplementedGopmServer) StopAllProcesses(ctx context.Context, req *StartStopAllRequest) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAllProcesses not implemented")
}
func (*UnimplementedGopmServer) Shutdown(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (*UnimplementedGopmServer) ReloadConfig(ctx context.Context, req *empty.Empty) (*ReloadConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadConfig not implemented")
}
func (*UnimplementedGopmServer) TailLog(req *TailLogRequest, srv Gopm_TailLogServer) error {
	return status.Errorf(codes.Unimplemented, "method TailLog not implemented")
}
func (*UnimplementedGopmServer) SignalProcess(ctx context.Context, req *SignalProcessRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalProcess not implemented")
}
func (*UnimplementedGopmServer) SignalProcessGroup(ctx context.Context, req *SignalProcessRequest) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalProcessGroup not implemented")
}
func (*UnimplementedGopmServer) SignalAllProcesses(ctx context.Context, req *SignalProcessRequest) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalAllProcesses not implemented")
}

func RegisterGopmServer(s *grpc.Server, srv GopmServer) {
	s.RegisterService(&_Gopm_serviceDesc, srv)
}

func _Gopm_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).GetVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_GetProcessInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).GetProcessInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/GetProcessInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).GetProcessInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_StartProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).StartProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/StartProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).StartProcess(ctx, req.(*StartStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_StopProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).StopProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/StopProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).StopProcess(ctx, req.(*StartStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_StartAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).StartAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/StartAllProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).StartAllProcesses(ctx, req.(*StartStopAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_StopAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).StopAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/StopAllProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).StopAllProcesses(ctx, req.(*StartStopAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).Shutdown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_ReloadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).ReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/ReloadConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).ReloadConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_TailLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GopmServer).TailLog(m, &gopmTailLogServer{stream})
}

type Gopm_TailLogServer interface {
	Send(*TailLogResponse) error
	grpc.ServerStream
}

type gopmTailLogServer struct {
	grpc.ServerStream
}

func (x *gopmTailLogServer) Send(m *TailLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Gopm_SignalProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).SignalProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/SignalProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).SignalProcess(ctx, req.(*SignalProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_SignalProcessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).SignalProcessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/SignalProcessGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).SignalProcessGroup(ctx, req.(*SignalProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_SignalAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).SignalAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/SignalAllProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).SignalAllProcesses(ctx, req.(*SignalProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gopm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gopm.rpc.Gopm",
	HandlerType: (*GopmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Gopm_GetVersion_Handler,
		},
		{
			MethodName: "GetProcessInfo",
			Handler:    _Gopm_GetProcessInfo_Handler,
		},
		{
			MethodName: "StartProcess",
			Handler:    _Gopm_StartProcess_Handler,
		},
		{
			MethodName: "StopProcess",
			Handler:    _Gopm_StopProcess_Handler,
		},
		{
			MethodName: "StartAllProcesses",
			Handler:    _Gopm_StartAllProcesses_Handler,
		},
		{
			MethodName: "StopAllProcesses",
			Handler:    _Gopm_StopAllProcesses_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Gopm_Shutdown_Handler,
		},
		{
			MethodName: "ReloadConfig",
			Handler:    _Gopm_ReloadConfig_Handler,
		},
		{
			MethodName: "SignalProcess",
			Handler:    _Gopm_SignalProcess_Handler,
		},
		{
			MethodName: "SignalProcessGroup",
			Handler:    _Gopm_SignalProcessGroup_Handler,
		},
		{
			MethodName: "SignalAllProcesses",
			Handler:    _Gopm_SignalAllProcesses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TailLog",
			Handler:       _Gopm_TailLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
