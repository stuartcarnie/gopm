// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.12.2
// source: service.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LogDevice int32

const (
	LogDevice_Stdout LogDevice = 0
	LogDevice_Stderr LogDevice = 1
)

// Enum value maps for LogDevice.
var (
	LogDevice_name = map[int32]string{
		0: "Stdout",
		1: "Stderr",
	}
	LogDevice_value = map[string]int32{
		"Stdout": 0,
		"Stderr": 1,
	}
)

func (x LogDevice) Enum() *LogDevice {
	p := new(LogDevice)
	*p = x
	return p
}

func (x LogDevice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogDevice) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[0].Descriptor()
}

func (LogDevice) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[0]
}

func (x LogDevice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogDevice.Descriptor instead.
func (LogDevice) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

type ProcessSignal int32

const (
	ProcessSignal_HUP  ProcessSignal = 0
	ProcessSignal_INT  ProcessSignal = 1
	ProcessSignal_QUIT ProcessSignal = 2
	ProcessSignal_KILL ProcessSignal = 3
	ProcessSignal_USR1 ProcessSignal = 4
	ProcessSignal_USR2 ProcessSignal = 5
	ProcessSignal_TERM ProcessSignal = 6
)

// Enum value maps for ProcessSignal.
var (
	ProcessSignal_name = map[int32]string{
		0: "HUP",
		1: "INT",
		2: "QUIT",
		3: "KILL",
		4: "USR1",
		5: "USR2",
		6: "TERM",
	}
	ProcessSignal_value = map[string]int32{
		"HUP":  0,
		"INT":  1,
		"QUIT": 2,
		"KILL": 3,
		"USR1": 4,
		"USR2": 5,
		"TERM": 6,
	}
)

func (x ProcessSignal) Enum() *ProcessSignal {
	p := new(ProcessSignal)
	*p = x
	return p
}

func (x ProcessSignal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessSignal) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[1].Descriptor()
}

func (ProcessSignal) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[1]
}

func (x ProcessSignal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessSignal.Descriptor instead.
func (ProcessSignal) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ProcessInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processes []*ProcessInfo `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
}

func (x *ProcessInfoResponse) Reset() {
	*x = ProcessInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfoResponse) ProtoMessage() {}

func (x *ProcessInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfoResponse.ProtoReflect.Descriptor instead.
func (*ProcessInfoResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessInfoResponse) GetProcesses() []*ProcessInfo {
	if x != nil {
		return x.Processes
	}
	return nil
}

type ProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Group         string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Description   string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Start         int64  `protobuf:"varint,4,opt,name=Start,proto3" json:"Start,omitempty"`
	Stop          int64  `protobuf:"varint,5,opt,name=Stop,proto3" json:"Stop,omitempty"`
	Now           int64  `protobuf:"varint,6,opt,name=Now,proto3" json:"Now,omitempty"`
	State         int64  `protobuf:"varint,7,opt,name=State,proto3" json:"State,omitempty"`
	StateName     string `protobuf:"bytes,8,opt,name=StateName,proto3" json:"StateName,omitempty"`
	SpawnErr      string `protobuf:"bytes,9,opt,name=SpawnErr,proto3" json:"SpawnErr,omitempty"`
	ExitStatus    int64  `protobuf:"varint,10,opt,name=ExitStatus,proto3" json:"ExitStatus,omitempty"`
	Logfile       string `protobuf:"bytes,11,opt,name=Logfile,proto3" json:"Logfile,omitempty"`
	StdoutLogfile string `protobuf:"bytes,12,opt,name=StdoutLogfile,proto3" json:"StdoutLogfile,omitempty"`
	StderrLogfile string `protobuf:"bytes,13,opt,name=StderrLogfile,proto3" json:"StderrLogfile,omitempty"`
	Pid           int64  `protobuf:"varint,14,opt,name=Pid,proto3" json:"Pid,omitempty"`
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessInfo) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ProcessInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProcessInfo) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ProcessInfo) GetStop() int64 {
	if x != nil {
		return x.Stop
	}
	return 0
}

func (x *ProcessInfo) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

func (x *ProcessInfo) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ProcessInfo) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *ProcessInfo) GetSpawnErr() string {
	if x != nil {
		return x.SpawnErr
	}
	return ""
}

func (x *ProcessInfo) GetExitStatus() int64 {
	if x != nil {
		return x.ExitStatus
	}
	return 0
}

func (x *ProcessInfo) GetLogfile() string {
	if x != nil {
		return x.Logfile
	}
	return ""
}

func (x *ProcessInfo) GetStdoutLogfile() string {
	if x != nil {
		return x.StdoutLogfile
	}
	return ""
}

func (x *ProcessInfo) GetStderrLogfile() string {
	if x != nil {
		return x.StderrLogfile
	}
	return ""
}

func (x *ProcessInfo) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type StartStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Wait bool   `protobuf:"varint,2,opt,name=wait,proto3" json:"wait,omitempty"`
}

func (x *StartStopRequest) Reset() {
	*x = StartStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStopRequest) ProtoMessage() {}

func (x *StartStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStopRequest.ProtoReflect.Descriptor instead.
func (*StartStopRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *StartStopRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartStopRequest) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

type StartStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartStopResponse) Reset() {
	*x = StartStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStopResponse) ProtoMessage() {}

func (x *StartStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStopResponse.ProtoReflect.Descriptor instead.
func (*StartStopResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

type StartStopAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wait bool `protobuf:"varint,2,opt,name=wait,proto3" json:"wait,omitempty"`
}

func (x *StartStopAllRequest) Reset() {
	*x = StartStopAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartStopAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStopAllRequest) ProtoMessage() {}

func (x *StartStopAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStopAllRequest.ProtoReflect.Descriptor instead.
func (*StartStopAllRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *StartStopAllRequest) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

type ReloadConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddedGroup   []string `protobuf:"bytes,1,rep,name=AddedGroup,proto3" json:"AddedGroup,omitempty"`
	ChangedGroup []string `protobuf:"bytes,2,rep,name=ChangedGroup,proto3" json:"ChangedGroup,omitempty"`
	RemovedGroup []string `protobuf:"bytes,3,rep,name=RemovedGroup,proto3" json:"RemovedGroup,omitempty"`
}

func (x *ReloadConfigResponse) Reset() {
	*x = ReloadConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadConfigResponse) ProtoMessage() {}

func (x *ReloadConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadConfigResponse.ProtoReflect.Descriptor instead.
func (*ReloadConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *ReloadConfigResponse) GetAddedGroup() []string {
	if x != nil {
		return x.AddedGroup
	}
	return nil
}

func (x *ReloadConfigResponse) GetChangedGroup() []string {
	if x != nil {
		return x.ChangedGroup
	}
	return nil
}

func (x *ReloadConfigResponse) GetRemovedGroup() []string {
	if x != nil {
		return x.RemovedGroup
	}
	return nil
}

type TailLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Device       LogDevice `protobuf:"varint,2,opt,name=device,proto3,enum=gopm.rpc.LogDevice" json:"device,omitempty"`
	BacklogLines int64     `protobuf:"varint,3,opt,name=backlogLines,proto3" json:"backlogLines,omitempty"`
}

func (x *TailLogRequest) Reset() {
	*x = TailLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TailLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailLogRequest) ProtoMessage() {}

func (x *TailLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailLogRequest.ProtoReflect.Descriptor instead.
func (*TailLogRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *TailLogRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TailLogRequest) GetDevice() LogDevice {
	if x != nil {
		return x.Device
	}
	return LogDevice_Stdout
}

func (x *TailLogRequest) GetBacklogLines() int64 {
	if x != nil {
		return x.BacklogLines
	}
	return 0
}

type TailLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lines []byte `protobuf:"bytes,1,opt,name=lines,proto3" json:"lines,omitempty"`
}

func (x *TailLogResponse) Reset() {
	*x = TailLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TailLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailLogResponse) ProtoMessage() {}

func (x *TailLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailLogResponse.ProtoReflect.Descriptor instead.
func (*TailLogResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *TailLogResponse) GetLines() []byte {
	if x != nil {
		return x.Lines
	}
	return nil
}

type SignalProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Signal ProcessSignal `protobuf:"varint,2,opt,name=signal,proto3,enum=gopm.rpc.ProcessSignal" json:"signal,omitempty"`
}

func (x *SignalProcessRequest) Reset() {
	*x = SignalProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalProcessRequest) ProtoMessage() {}

func (x *SignalProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalProcessRequest.ProtoReflect.Descriptor instead.
func (*SignalProcessRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *SignalProcessRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SignalProcessRequest) GetSignal() ProcessSignal {
	if x != nil {
		return x.Signal
	}
	return ProcessSignal_HUP
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22,
	0xfd, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x4e, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x70, 0x61, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x70, 0x61, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4c, 0x6f, 0x67, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x67, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74,
	0x4c, 0x6f, 0x67, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x64, 0x65, 0x72,
	0x72, 0x4c, 0x6f, 0x67, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x4c, 0x6f, 0x67, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x50, 0x69, 0x64, 0x22,
	0x3a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x29, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x22, 0x7e, 0x0a, 0x14, 0x52,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x64, 0x64, 0x65, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x75, 0x0a, 0x0e, 0x54,
	0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x22, 0x27, 0x0a, 0x0f, 0x54, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x14, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2a, 0x23, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x10, 0x01, 0x2a, 0x53, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x07,
	0x0a, 0x03, 0x48, 0x55, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x51, 0x55, 0x49, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49,
	0x4c, 0x4c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x52, 0x31, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x55, 0x53, 0x52, 0x32, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x52, 0x4d,
	0x10, 0x06, 0x32, 0xff, 0x06, 0x0a, 0x04, 0x47, 0x6f, 0x70, 0x6d, 0x12, 0x3f, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e,
	0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x70, 0x6d,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x6f,
	0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x70,
	0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x53, 0x74, 0x6f,
	0x70, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74,
	0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67,
	0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1e, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x07, 0x54, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x70,
	0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x47, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x12, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x70, 0x6d, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_service_proto_goTypes = []interface{}{
	(LogDevice)(0),               // 0: gopm.rpc.LogDevice
	(ProcessSignal)(0),           // 1: gopm.rpc.ProcessSignal
	(*VersionResponse)(nil),      // 2: gopm.rpc.VersionResponse
	(*ProcessInfoResponse)(nil),  // 3: gopm.rpc.ProcessInfoResponse
	(*ProcessInfo)(nil),          // 4: gopm.rpc.ProcessInfo
	(*StartStopRequest)(nil),     // 5: gopm.rpc.StartStopRequest
	(*StartStopResponse)(nil),    // 6: gopm.rpc.StartStopResponse
	(*StartStopAllRequest)(nil),  // 7: gopm.rpc.StartStopAllRequest
	(*ReloadConfigResponse)(nil), // 8: gopm.rpc.ReloadConfigResponse
	(*TailLogRequest)(nil),       // 9: gopm.rpc.TailLogRequest
	(*TailLogResponse)(nil),      // 10: gopm.rpc.TailLogResponse
	(*SignalProcessRequest)(nil), // 11: gopm.rpc.SignalProcessRequest
	(*empty.Empty)(nil),          // 12: google.protobuf.Empty
}
var file_service_proto_depIdxs = []int32{
	4,  // 0: gopm.rpc.ProcessInfoResponse.processes:type_name -> gopm.rpc.ProcessInfo
	0,  // 1: gopm.rpc.TailLogRequest.device:type_name -> gopm.rpc.LogDevice
	1,  // 2: gopm.rpc.SignalProcessRequest.signal:type_name -> gopm.rpc.ProcessSignal
	12, // 3: gopm.rpc.Gopm.GetVersion:input_type -> google.protobuf.Empty
	12, // 4: gopm.rpc.Gopm.GetProcessInfo:input_type -> google.protobuf.Empty
	5,  // 5: gopm.rpc.Gopm.StartProcess:input_type -> gopm.rpc.StartStopRequest
	5,  // 6: gopm.rpc.Gopm.StopProcess:input_type -> gopm.rpc.StartStopRequest
	7,  // 7: gopm.rpc.Gopm.StartAllProcesses:input_type -> gopm.rpc.StartStopAllRequest
	7,  // 8: gopm.rpc.Gopm.StopAllProcesses:input_type -> gopm.rpc.StartStopAllRequest
	12, // 9: gopm.rpc.Gopm.Shutdown:input_type -> google.protobuf.Empty
	12, // 10: gopm.rpc.Gopm.ReloadConfig:input_type -> google.protobuf.Empty
	9,  // 11: gopm.rpc.Gopm.TailLog:input_type -> gopm.rpc.TailLogRequest
	11, // 12: gopm.rpc.Gopm.SignalProcess:input_type -> gopm.rpc.SignalProcessRequest
	11, // 13: gopm.rpc.Gopm.SignalProcessGroup:input_type -> gopm.rpc.SignalProcessRequest
	11, // 14: gopm.rpc.Gopm.SignalAllProcesses:input_type -> gopm.rpc.SignalProcessRequest
	2,  // 15: gopm.rpc.Gopm.GetVersion:output_type -> gopm.rpc.VersionResponse
	3,  // 16: gopm.rpc.Gopm.GetProcessInfo:output_type -> gopm.rpc.ProcessInfoResponse
	6,  // 17: gopm.rpc.Gopm.StartProcess:output_type -> gopm.rpc.StartStopResponse
	6,  // 18: gopm.rpc.Gopm.StopProcess:output_type -> gopm.rpc.StartStopResponse
	3,  // 19: gopm.rpc.Gopm.StartAllProcesses:output_type -> gopm.rpc.ProcessInfoResponse
	3,  // 20: gopm.rpc.Gopm.StopAllProcesses:output_type -> gopm.rpc.ProcessInfoResponse
	12, // 21: gopm.rpc.Gopm.Shutdown:output_type -> google.protobuf.Empty
	8,  // 22: gopm.rpc.Gopm.ReloadConfig:output_type -> gopm.rpc.ReloadConfigResponse
	10, // 23: gopm.rpc.Gopm.TailLog:output_type -> gopm.rpc.TailLogResponse
	12, // 24: gopm.rpc.Gopm.SignalProcess:output_type -> google.protobuf.Empty
	3,  // 25: gopm.rpc.Gopm.SignalProcessGroup:output_type -> gopm.rpc.ProcessInfoResponse
	3,  // 26: gopm.rpc.Gopm.SignalAllProcesses:output_type -> gopm.rpc.ProcessInfoResponse
	15, // [15:27] is the sub-list for method output_type
	3,  // [3:15] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartStopAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TailLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TailLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		EnumInfos:         file_service_proto_enumTypes,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GopmClient is the client API for Gopm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GopmClient interface {
	GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	GetProcessInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
	StartProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error)
	StopProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error)
	StartAllProcesses(ctx context.Context, in *StartStopAllRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
	StopAllProcesses(ctx context.Context, in *StartStopAllRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
	Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ReloadConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReloadConfigResponse, error)
	TailLog(ctx context.Context, in *TailLogRequest, opts ...grpc.CallOption) (Gopm_TailLogClient, error)
	SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SignalProcessGroup(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
	SignalAllProcesses(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
}

type gopmClient struct {
	cc grpc.ClientConnInterface
}

func NewGopmClient(cc grpc.ClientConnInterface) GopmClient {
	return &gopmClient{cc}
}

func (c *gopmClient) GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) GetProcessInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/GetProcessInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) StartProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error) {
	out := new(StartStopResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/StartProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) StopProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error) {
	out := new(StartStopResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/StopProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) StartAllProcesses(ctx context.Context, in *StartStopAllRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/StartAllProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) StopAllProcesses(ctx context.Context, in *StartStopAllRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/StopAllProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) ReloadConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReloadConfigResponse, error) {
	out := new(ReloadConfigResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/ReloadConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) TailLog(ctx context.Context, in *TailLogRequest, opts ...grpc.CallOption) (Gopm_TailLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gopm_serviceDesc.Streams[0], "/gopm.rpc.Gopm/TailLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &gopmTailLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gopm_TailLogClient interface {
	Recv() (*TailLogResponse, error)
	grpc.ClientStream
}

type gopmTailLogClient struct {
	grpc.ClientStream
}

func (x *gopmTailLogClient) Recv() (*TailLogResponse, error) {
	m := new(TailLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gopmClient) SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/SignalProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) SignalProcessGroup(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/SignalProcessGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) SignalAllProcesses(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/SignalAllProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GopmServer is the server API for Gopm service.
type GopmServer interface {
	GetVersion(context.Context, *empty.Empty) (*VersionResponse, error)
	GetProcessInfo(context.Context, *empty.Empty) (*ProcessInfoResponse, error)
	StartProcess(context.Context, *StartStopRequest) (*StartStopResponse, error)
	StopProcess(context.Context, *StartStopRequest) (*StartStopResponse, error)
	StartAllProcesses(context.Context, *StartStopAllRequest) (*ProcessInfoResponse, error)
	StopAllProcesses(context.Context, *StartStopAllRequest) (*ProcessInfoResponse, error)
	Shutdown(context.Context, *empty.Empty) (*empty.Empty, error)
	ReloadConfig(context.Context, *empty.Empty) (*ReloadConfigResponse, error)
	TailLog(*TailLogRequest, Gopm_TailLogServer) error
	SignalProcess(context.Context, *SignalProcessRequest) (*empty.Empty, error)
	SignalProcessGroup(context.Context, *SignalProcessRequest) (*ProcessInfoResponse, error)
	SignalAllProcesses(context.Context, *SignalProcessRequest) (*ProcessInfoResponse, error)
}

// UnimplementedGopmServer can be embedded to have forward compatible implementations.
type UnimplementedGopmServer struct {
}

func (*UnimplementedGopmServer) GetVersion(context.Context, *empty.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedGopmServer) GetProcessInfo(context.Context, *empty.Empty) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInfo not implemented")
}
func (*UnimplementedGopmServer) StartProcess(context.Context, *StartStopRequest) (*StartStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProcess not implemented")
}
func (*UnimplementedGopmServer) StopProcess(context.Context, *StartStopRequest) (*StartStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProcess not implemented")
}
func (*UnimplementedGopmServer) StartAllProcesses(context.Context, *StartStopAllRequest) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAllProcesses not implemented")
}
func (*UnimplementedGopmServer) StopAllProcesses(context.Context, *StartStopAllRequest) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAllProcesses not implemented")
}
func (*UnimplementedGopmServer) Shutdown(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (*UnimplementedGopmServer) ReloadConfig(context.Context, *empty.Empty) (*ReloadConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadConfig not implemented")
}
func (*UnimplementedGopmServer) TailLog(*TailLogRequest, Gopm_TailLogServer) error {
	return status.Errorf(codes.Unimplemented, "method TailLog not implemented")
}
func (*UnimplementedGopmServer) SignalProcess(context.Context, *SignalProcessRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalProcess not implemented")
}
func (*UnimplementedGopmServer) SignalProcessGroup(context.Context, *SignalProcessRequest) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalProcessGroup not implemented")
}
func (*UnimplementedGopmServer) SignalAllProcesses(context.Context, *SignalProcessRequest) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalAllProcesses not implemented")
}

func RegisterGopmServer(s *grpc.Server, srv GopmServer) {
	s.RegisterService(&_Gopm_serviceDesc, srv)
}

func _Gopm_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).GetVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_GetProcessInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).GetProcessInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/GetProcessInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).GetProcessInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_StartProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).StartProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/StartProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).StartProcess(ctx, req.(*StartStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_StopProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).StopProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/StopProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).StopProcess(ctx, req.(*StartStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_StartAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).StartAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/StartAllProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).StartAllProcesses(ctx, req.(*StartStopAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_StopAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).StopAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/StopAllProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).StopAllProcesses(ctx, req.(*StartStopAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).Shutdown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_ReloadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).ReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/ReloadConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).ReloadConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_TailLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GopmServer).TailLog(m, &gopmTailLogServer{stream})
}

type Gopm_TailLogServer interface {
	Send(*TailLogResponse) error
	grpc.ServerStream
}

type gopmTailLogServer struct {
	grpc.ServerStream
}

func (x *gopmTailLogServer) Send(m *TailLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Gopm_SignalProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).SignalProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/SignalProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).SignalProcess(ctx, req.(*SignalProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_SignalProcessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).SignalProcessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/SignalProcessGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).SignalProcessGroup(ctx, req.(*SignalProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_SignalAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).SignalAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/SignalAllProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).SignalAllProcesses(ctx, req.(*SignalProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gopm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gopm.rpc.Gopm",
	HandlerType: (*GopmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Gopm_GetVersion_Handler,
		},
		{
			MethodName: "GetProcessInfo",
			Handler:    _Gopm_GetProcessInfo_Handler,
		},
		{
			MethodName: "StartProcess",
			Handler:    _Gopm_StartProcess_Handler,
		},
		{
			MethodName: "StopProcess",
			Handler:    _Gopm_StopProcess_Handler,
		},
		{
			MethodName: "StartAllProcesses",
			Handler:    _Gopm_StartAllProcesses_Handler,
		},
		{
			MethodName: "StopAllProcesses",
			Handler:    _Gopm_StopAllProcesses_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Gopm_Shutdown_Handler,
		},
		{
			MethodName: "ReloadConfig",
			Handler:    _Gopm_ReloadConfig_Handler,
		},
		{
			MethodName: "SignalProcess",
			Handler:    _Gopm_SignalProcess_Handler,
		},
		{
			MethodName: "SignalProcessGroup",
			Handler:    _Gopm_SignalProcessGroup_Handler,
		},
		{
			MethodName: "SignalAllProcesses",
			Handler:    _Gopm_SignalAllProcesses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TailLog",
			Handler:       _Gopm_TailLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
