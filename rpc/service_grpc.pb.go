// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GopmClient is the client API for Gopm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GopmClient interface {
	// GetProcessInfo returns information on all current processes.
	GetProcessInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
	// StartProcess requests that some set of processes should start.
	// If some didn't start OK, the returned error includes a NotStartedError
	// detail.
	StartProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error)
	// StartAllProcesses requests that all processes should start.
	// If not all succeeded in starting, the returned error includes a NotStartedError
	// detail.
	StartAllProcesses(ctx context.Context, in *StartStopAllRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
	// StopProcess requests that some set of processes should stop.
	StopProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error)
	// StopProcess requests that all processes should stop.
	StopAllProcesses(ctx context.Context, in *StartStopAllRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
	// RestartProcess requests that some set of processes should start.
	// If some didn't start again OK, the returned error includes a NotStartedError
	// detail.
	RestartProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error)
	// Shutdown shuts down the gopm server, stopping all processes first.
	Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReloadConfig asks gopm to update its configuration by re-reading the configuration
	// directory.
	ReloadConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReloadConfigResponse, error)
	// TailLog returns log output of a process as a stream.
	TailLog(ctx context.Context, in *TailLogRequest, opts ...grpc.CallOption) (Gopm_TailLogClient, error)
	// SignalProcess sends a signal to a set of processes.
	SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SignalProcess sends a signal to all processes.
	SignalAllProcesses(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
	// DumpConfig returns the fully rendered configuration data.
	DumpConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DumpConfigResponse, error)
}

type gopmClient struct {
	cc grpc.ClientConnInterface
}

func NewGopmClient(cc grpc.ClientConnInterface) GopmClient {
	return &gopmClient{cc}
}

func (c *gopmClient) GetProcessInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/GetProcessInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) StartProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error) {
	out := new(StartStopResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/StartProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) StartAllProcesses(ctx context.Context, in *StartStopAllRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/StartAllProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) StopProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error) {
	out := new(StartStopResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/StopProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) StopAllProcesses(ctx context.Context, in *StartStopAllRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/StopAllProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) RestartProcess(ctx context.Context, in *StartStopRequest, opts ...grpc.CallOption) (*StartStopResponse, error) {
	out := new(StartStopResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/RestartProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) ReloadConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReloadConfigResponse, error) {
	out := new(ReloadConfigResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/ReloadConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) TailLog(ctx context.Context, in *TailLogRequest, opts ...grpc.CallOption) (Gopm_TailLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gopm_ServiceDesc.Streams[0], "/gopm.rpc.Gopm/TailLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &gopmTailLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gopm_TailLogClient interface {
	Recv() (*TailLogResponse, error)
	grpc.ClientStream
}

type gopmTailLogClient struct {
	grpc.ClientStream
}

func (x *gopmTailLogClient) Recv() (*TailLogResponse, error) {
	m := new(TailLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gopmClient) SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/SignalProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) SignalAllProcesses(ctx context.Context, in *SignalProcessRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/SignalAllProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopmClient) DumpConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DumpConfigResponse, error) {
	out := new(DumpConfigResponse)
	err := c.cc.Invoke(ctx, "/gopm.rpc.Gopm/DumpConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GopmServer is the server API for Gopm service.
// All implementations must embed UnimplementedGopmServer
// for forward compatibility
type GopmServer interface {
	// GetProcessInfo returns information on all current processes.
	GetProcessInfo(context.Context, *empty.Empty) (*ProcessInfoResponse, error)
	// StartProcess requests that some set of processes should start.
	// If some didn't start OK, the returned error includes a NotStartedError
	// detail.
	StartProcess(context.Context, *StartStopRequest) (*StartStopResponse, error)
	// StartAllProcesses requests that all processes should start.
	// If not all succeeded in starting, the returned error includes a NotStartedError
	// detail.
	StartAllProcesses(context.Context, *StartStopAllRequest) (*ProcessInfoResponse, error)
	// StopProcess requests that some set of processes should stop.
	StopProcess(context.Context, *StartStopRequest) (*StartStopResponse, error)
	// StopProcess requests that all processes should stop.
	StopAllProcesses(context.Context, *StartStopAllRequest) (*ProcessInfoResponse, error)
	// RestartProcess requests that some set of processes should start.
	// If some didn't start again OK, the returned error includes a NotStartedError
	// detail.
	RestartProcess(context.Context, *StartStopRequest) (*StartStopResponse, error)
	// Shutdown shuts down the gopm server, stopping all processes first.
	Shutdown(context.Context, *empty.Empty) (*empty.Empty, error)
	// ReloadConfig asks gopm to update its configuration by re-reading the configuration
	// directory.
	ReloadConfig(context.Context, *empty.Empty) (*ReloadConfigResponse, error)
	// TailLog returns log output of a process as a stream.
	TailLog(*TailLogRequest, Gopm_TailLogServer) error
	// SignalProcess sends a signal to a set of processes.
	SignalProcess(context.Context, *SignalProcessRequest) (*empty.Empty, error)
	// SignalProcess sends a signal to all processes.
	SignalAllProcesses(context.Context, *SignalProcessRequest) (*ProcessInfoResponse, error)
	// DumpConfig returns the fully rendered configuration data.
	DumpConfig(context.Context, *empty.Empty) (*DumpConfigResponse, error)
	mustEmbedUnimplementedGopmServer()
}

// UnimplementedGopmServer must be embedded to have forward compatible implementations.
type UnimplementedGopmServer struct {
}

func (UnimplementedGopmServer) GetProcessInfo(context.Context, *empty.Empty) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInfo not implemented")
}
func (UnimplementedGopmServer) StartProcess(context.Context, *StartStopRequest) (*StartStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProcess not implemented")
}
func (UnimplementedGopmServer) StartAllProcesses(context.Context, *StartStopAllRequest) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAllProcesses not implemented")
}
func (UnimplementedGopmServer) StopProcess(context.Context, *StartStopRequest) (*StartStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProcess not implemented")
}
func (UnimplementedGopmServer) StopAllProcesses(context.Context, *StartStopAllRequest) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAllProcesses not implemented")
}
func (UnimplementedGopmServer) RestartProcess(context.Context, *StartStopRequest) (*StartStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartProcess not implemented")
}
func (UnimplementedGopmServer) Shutdown(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedGopmServer) ReloadConfig(context.Context, *empty.Empty) (*ReloadConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadConfig not implemented")
}
func (UnimplementedGopmServer) TailLog(*TailLogRequest, Gopm_TailLogServer) error {
	return status.Errorf(codes.Unimplemented, "method TailLog not implemented")
}
func (UnimplementedGopmServer) SignalProcess(context.Context, *SignalProcessRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalProcess not implemented")
}
func (UnimplementedGopmServer) SignalAllProcesses(context.Context, *SignalProcessRequest) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalAllProcesses not implemented")
}
func (UnimplementedGopmServer) DumpConfig(context.Context, *empty.Empty) (*DumpConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpConfig not implemented")
}
func (UnimplementedGopmServer) mustEmbedUnimplementedGopmServer() {}

// UnsafeGopmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GopmServer will
// result in compilation errors.
type UnsafeGopmServer interface {
	mustEmbedUnimplementedGopmServer()
}

func RegisterGopmServer(s grpc.ServiceRegistrar, srv GopmServer) {
	s.RegisterService(&Gopm_ServiceDesc, srv)
}

func _Gopm_GetProcessInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).GetProcessInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/GetProcessInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).GetProcessInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_StartProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).StartProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/StartProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).StartProcess(ctx, req.(*StartStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_StartAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).StartAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/StartAllProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).StartAllProcesses(ctx, req.(*StartStopAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_StopProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).StopProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/StopProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).StopProcess(ctx, req.(*StartStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_StopAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).StopAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/StopAllProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).StopAllProcesses(ctx, req.(*StartStopAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_RestartProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).RestartProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/RestartProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).RestartProcess(ctx, req.(*StartStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).Shutdown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_ReloadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).ReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/ReloadConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).ReloadConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_TailLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GopmServer).TailLog(m, &gopmTailLogServer{stream})
}

type Gopm_TailLogServer interface {
	Send(*TailLogResponse) error
	grpc.ServerStream
}

type gopmTailLogServer struct {
	grpc.ServerStream
}

func (x *gopmTailLogServer) Send(m *TailLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Gopm_SignalProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).SignalProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/SignalProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).SignalProcess(ctx, req.(*SignalProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_SignalAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).SignalAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/SignalAllProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).SignalAllProcesses(ctx, req.(*SignalProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gopm_DumpConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopmServer).DumpConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopm.rpc.Gopm/DumpConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopmServer).DumpConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Gopm_ServiceDesc is the grpc.ServiceDesc for Gopm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gopm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gopm.rpc.Gopm",
	HandlerType: (*GopmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcessInfo",
			Handler:    _Gopm_GetProcessInfo_Handler,
		},
		{
			MethodName: "StartProcess",
			Handler:    _Gopm_StartProcess_Handler,
		},
		{
			MethodName: "StartAllProcesses",
			Handler:    _Gopm_StartAllProcesses_Handler,
		},
		{
			MethodName: "StopProcess",
			Handler:    _Gopm_StopProcess_Handler,
		},
		{
			MethodName: "StopAllProcesses",
			Handler:    _Gopm_StopAllProcesses_Handler,
		},
		{
			MethodName: "RestartProcess",
			Handler:    _Gopm_RestartProcess_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Gopm_Shutdown_Handler,
		},
		{
			MethodName: "ReloadConfig",
			Handler:    _Gopm_ReloadConfig_Handler,
		},
		{
			MethodName: "SignalProcess",
			Handler:    _Gopm_SignalProcess_Handler,
		},
		{
			MethodName: "SignalAllProcesses",
			Handler:    _Gopm_SignalAllProcesses_Handler,
		},
		{
			MethodName: "DumpConfig",
			Handler:    _Gopm_DumpConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TailLog",
			Handler:       _Gopm_TailLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
